// Managers/SimpleFeedManager.swift
import Foundation
import SwiftUI

@MainActor
class SimpleFeedManager: ObservableObject {
    @Published var updates: [ServiceUpdate] = []
    @Published var isLoading = false
    @Published var hasUnreadUpdates = false
    @Published var lastError: String?

    // Ïã§Ï†ú ÏûëÎèôÌïòÎäî RSS ÌîºÎìúÎì§
    private let rssSources = [
        RSSSource(
            name: "Hacker News",
            icon: "üíª",
            url: "https://news.ycombinator.com/rss",
            category: "Í∞úÎ∞ú"
        ),
        RSSSource(
            name: "Reddit r/MachineLearning",
            icon: "ü§ñ",
            url: "https://www.reddit.com/r/MachineLearning/.rss",
            category: "AI Ïó∞Íµ¨"
        )
    ]

    // ÏàòÎèôÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Ìï† AI ÏÑúÎπÑÏä§Îì§ (RSS ÏóÜÎäî Í≤ΩÏö∞)
    private let manualSources = [
        ManualSource(name: "OpenAI", icon: "ü§ñ", category: "LLM"),
        ManualSource(name: "Claude", icon: "üß†", category: "LLM"),
        ManualSource(name: "Midjourney", icon: "üé®", category: "Ïù¥ÎØ∏ÏßÄ")
    ]

    init() {
        loadSavedUpdates()
        Task {
            await refreshAllFeeds()
        }
    }

    // MARK: - ÌîºÎìú ÏÉàÎ°úÍ≥†Ïπ®
    func refreshAllFeeds() async {
        isLoading = true
        lastError = nil

        var newUpdates: [ServiceUpdate] = []

        // 1. RSS ÌîºÎìú ÌååÏã±
        for source in rssSources {
            if let feedUpdates = await parseRSSFeed(source) {
                newUpdates.append(contentsOf: feedUpdates)
            }
        }

        // 2. ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï∂îÍ∞Ä (ÏµúÍ∑º ÏïåÎ†§ÏßÑ ÏóÖÎç∞Ïù¥Ìä∏Îì§)
        newUpdates.append(contentsOf: getManualUpdates())

        // 3. ÎÇ†ÏßúÏàú Ï†ïÎ†¨
        newUpdates.sort { $0.publishedDate > $1.publishedDate }

        // 4. Í∏∞Ï°¥ ÏóÖÎç∞Ïù¥Ìä∏ÏôÄ Î≥ëÌï© (Ï§ëÎ≥µ Ï†úÍ±∞)
        mergeUpdates(newUpdates)

        isLoading = false
        saveUpdates()
    }

    // MARK: - RSS ÌååÏã± (XMLParser ÏÇ¨Ïö©)
    private func parseRSSFeed(_ source: RSSSource) async -> [ServiceUpdate]? {
        guard let url = URL(string: source.url) else { return nil }

        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            let parser = SimpleRSSParser()
            let items = parser.parse(data: data)

            return items.prefix(5).map { item in
                ServiceUpdate(
                    service: source.name,
                    serviceIcon: source.icon,
                    title: item.title,
                    summary: cleanHTML(item.description),
                    link: item.link,
                    publishedDate: item.pubDate ?? Date(),
                    category: categorizeUpdate(item.title),
                    importance: .normal,
                    isRead: false
                )
            }
        } catch {
            print("RSS ÌååÏã± ÏóêÎü¨ (\(source.name)): \(error)")
            return nil
        }
    }

    // MARK: - ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏ (ÌïòÎìúÏΩîÎî©Îêú ÏµúÏã† Îâ¥Ïä§)
    private func getManualUpdates() -> [ServiceUpdate] {
        return [
            ServiceUpdate(
                service: "OpenAI",
                serviceIcon: "ü§ñ",
                title: "ChatGPT ÏùåÏÑ± Í∏∞Îä• Î¨¥Î£å ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≥µÍ∞ú",
                summary: "OpenAIÍ∞Ä ChatGPTÏùò ÏùåÏÑ± ÎåÄÌôî Í∏∞Îä•ÏùÑ Î¨¥Î£å ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎèÑ Ï†úÍ≥µÌïòÍ∏∞ ÏãúÏûëÌñàÏäµÎãàÎã§. iOSÏôÄ Android Ïï±ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.",
                link: "https://openai.com",
                publishedDate: Date().addingTimeInterval(-3600), // 1ÏãúÍ∞Ñ Ï†Ñ
                category: .newFeature,
                importance: .critical,
                isRead: false
            ),
            ServiceUpdate(
                service: "Claude",
                serviceIcon: "üß†",
                title: "Claude 3.5 Sonnet ÏÑ±Îä• Í∞úÏÑ† ÏóÖÎç∞Ïù¥Ìä∏",
                summary: "ÏΩîÎìú ÏÉùÏÑ± Ï†ïÌôïÎèÑÍ∞Ä 15% Ìñ•ÏÉÅÎêòÏóàÏúºÎ©∞, ÏàòÌïô Î¨∏Ï†ú Ìï¥Í≤∞ Îä•Î†•Ïù¥ Í∞ïÌôîÎêòÏóàÏäµÎãàÎã§.",
                link: "https://anthropic.com",
                publishedDate: Date().addingTimeInterval(-7200), // 2ÏãúÍ∞Ñ Ï†Ñ
                category: .modelUpdate,
                importance: .normal,
                isRead: false
            ),
            ServiceUpdate(
                service: "Midjourney",
                serviceIcon: "üé®",
                title: "ÏÉàÎ°úÏö¥ --style ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä",
                summary: "Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïãú ÌäπÏ†ï ÏïÑÌä∏ Ïä§ÌÉÄÏùºÏùÑ ÏâΩÍ≤å Ï†ÅÏö©Ìï† Ïàò ÏûàÎäî ÏÉàÎ°úÏö¥ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.",
                link: "https://midjourney.com",
                publishedDate: Date().addingTimeInterval(-10800), // 3ÏãúÍ∞Ñ Ï†Ñ
                category: .newFeature,
                importance: .normal,
                isRead: false
            )
        ]
    }

    // MARK: - Ìó¨Ìçº Ìï®ÏàòÎì§
    private func cleanHTML(_ html: String) -> String {
        let pattern = "<[^>]+>"
        let cleaned = html.replacingOccurrences(
            of: pattern,
            with: "",
            options: .regularExpression
        )
        return String(cleaned.prefix(200))
    }

    private func categorizeUpdate(_ title: String) -> ServiceUpdate.UpdateCategory {
        let lower = title.lowercased()

        if lower.contains("price") || lower.contains("pricing") {
            return .priceChange
        } else if lower.contains("api") {
            return .apiUpdate
        } else if lower.contains("model") || lower.contains("gpt") {
            return .modelUpdate
        } else if lower.contains("feature") || lower.contains("update") {
            return .newFeature
        }

        return .general
    }

    private func mergeUpdates(_ newUpdates: [ServiceUpdate]) {
        var merged = updates

        for update in newUpdates {
            // ÎßÅÌÅ¨Î°ú Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            if !merged.contains(where: { $0.link == update.link }) {
                merged.append(update)
            }
        }

        // ÎÇ†ÏßúÏàú Ï†ïÎ†¨
        merged.sort { $0.publishedDate > $1.publishedDate }

        // ÏµúÎåÄ 100Í∞úÍπåÏßÄÎßå Ïú†ÏßÄ
        updates = Array(merged.prefix(100))

        // ÏùΩÏßÄ ÏïäÏùÄ ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏
        hasUnreadUpdates = updates.contains { !$0.isRead }
    }

    // MARK: - ÏùΩÏùå Ï≤òÎ¶¨
    func markAsRead(_ update: ServiceUpdate) {
        if let index = updates.firstIndex(where: { $0.id == update.id }) {
            updates[index].isRead = true
            hasUnreadUpdates = updates.contains { !$0.isRead }
            saveUpdates()
        }
    }

    func markAllAsRead() {
        for index in updates.indices {
            updates[index].isRead = true
        }
        hasUnreadUpdates = false
        saveUpdates()
    }

    // MARK: - Ï†ÄÏû•/Î°úÎìú
    private func saveUpdates() {
        if let encoded = try? JSONEncoder().encode(updates) {
            UserDefaults.standard.set(encoded, forKey: "SimpleFeedUpdates")
        }
    }

    private func loadSavedUpdates() {
        if let data = UserDefaults.standard.data(forKey: "SimpleFeedUpdates"),
           let decoded = try? JSONDecoder().decode([ServiceUpdate].self, from: data) {
            updates = decoded
            hasUnreadUpdates = decoded.contains { !$0.isRead }
        }
    }
}

// MARK: - Í∞ÑÎã®Ìïú RSS ÌååÏÑú
class SimpleRSSParser: NSObject, XMLParserDelegate {
    private var items: [RSSItem] = []
    private var currentItem: RSSItem?
    private var currentElement = ""
    private var currentValue = ""

    struct RSSItem {
        var title: String = ""
        var description: String = ""
        var link: String = ""
        var pubDate: Date?
    }

    func parse(data: Data) -> [RSSItem] {
        let parser = XMLParser(data: data)
        parser.delegate = self
        parser.parse()
        return items
    }

    // XMLParserDelegate Î©îÏÑúÎìúÎì§
    func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) {
        currentElement = elementName

        if elementName == "item" {
            currentItem = RSSItem()
        }
    }

    func parser(_ parser: XMLParser, foundCharacters string: String) {
        currentValue += string.trimmingCharacters(in: .whitespacesAndNewlines)
    }

    func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {
        if let item = currentItem {
            switch elementName {
            case "title":
                currentItem?.title = currentValue
            case "description":
                currentItem?.description = currentValue
            case "link":
                currentItem?.link = currentValue
            case "pubDate":
                currentItem?.pubDate = DateFormatter.rssDateFormatter.date(from: currentValue)
            case "item":
                if !item.title.isEmpty {
                    items.append(item)
                }
                currentItem = nil
            default:
                break
            }
        }

        currentValue = ""
    }
}

// MARK: - Îç∞Ïù¥ÌÑ∞ Î™®Îç∏
struct RSSSource {
    let name: String
    let icon: String
    let url: String
    let category: String
}

struct ManualSource {
    let name: String
    let icon: String
    let category: String
}

// MARK: - DateFormatter ÌôïÏû•
extension DateFormatter {
    static let rssDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "EEE, dd MMM yyyy HH:mm:ss Z"
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter
    }()
}
