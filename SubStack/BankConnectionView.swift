import SwiftUI

struct BankConnectionView: View {
    @EnvironmentObject var bankDataManager: BankDataManager
    @State private var showingImportOptions = false
    @State private var isImporting = false
    @State private var showingCardLogin = false
    @Environment(\.dismiss) var dismiss

    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                // ÏùºÎü¨Ïä§Ìä∏Î†àÏù¥ÏÖò
                Image(systemName: "building.columns.circle.fill")
                    .font(.system(size: 80))
                    .foregroundColor(.blue)
                    .padding(.top, 40)

                // ÏÑ§Î™Ö
                VStack(spacing: 12) {
                    Text("ÏùÄÌñâ Í≥ÑÏ¢å Ïó∞ÎèôÌïòÍ∏∞")
                        .font(.title)
                        .fontWeight(.bold)

                    Text("Í±∞Îûò ÎÇ¥Ïó≠ÏùÑ Î∂ÑÏÑùÌï¥ÏÑú\nÏûêÎèôÏúºÎ°ú Íµ¨ÎèÖ ÏÑúÎπÑÏä§Î•º Ï∞æÏïÑÎìúÎ†§Ïöî")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }

                // Î∞úÍ≤¨Îêú Íµ¨ÎèÖ Ïàò (Ïù¥ÎØ∏ Ïó∞ÎèôÎêú Í≤ΩÏö∞)
                if !bankDataManager.detectedSubscriptions.isEmpty {
                    HStack {
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.green)
                        Text("\(bankDataManager.detectedSubscriptions.count)Í∞úÏùò Íµ¨ÎèÖ Î∞úÍ≤¨Îê®")
                            .font(.subheadline)
                            .fontWeight(.medium)
                    }
                    .padding()
                    .background(Color.green.opacity(0.1))
                    .cornerRadius(10)
                }

                Spacer()

                // Ïó∞Îèô ÏòµÏÖòÎì§
                VStack(spacing: 16) {
                    // Ïò§ÌîàÎ±ÖÌÇπ Ïó∞Îèô (Ïã§Ï†ú Íµ¨ÌòÑÏãú)
                  ConnectionOptionButton(
                      title: "Ïò§ÌîàÎ±ÖÌÇπÏúºÎ°ú Ïó∞Îèô",
                      subtitle: "ÏïàÏ†ÑÌïòÍ≥† Îπ†Î•∏ ÏûêÎèô Ïó∞Îèô",
                      icon: "lock.shield.fill",
                      color: .blue
                  ) {
                      bankDataManager.loadSampleData()
                      // Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÌõÑ Î∞úÍ≤¨Îêú Íµ¨ÎèÖ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                      DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                          showingImportOptions = true
                      }
                  }

                    // CSV ÏóÖÎ°úÎìú
                    ConnectionOptionButton(
                        title: "CSV ÌååÏùº ÏóÖÎ°úÎìú",
                        subtitle: "ÏùÄÌñâ Ïï±ÏóêÏÑú ÎÇ¥Î†§Î∞õÏùÄ Í±∞ÎûòÎÇ¥Ïó≠",
                        icon: "doc.fill",
                        color: .green
                    ) {
                        showingImportOptions = true
                    }

                  // üëà Ïó¨Í∏∞Ïóê ÏÉà Î≤ÑÌäº Ï∂îÍ∞Ä!
                  ConnectionOptionButton(
                      title: "Ïπ¥ÎìúÏÇ¨ Î°úÍ∑∏Ïù∏",
                      subtitle: "Ïπ¥ÎìúÏÇ¨ ÏïÑÏù¥ÎîîÎ°ú ÏßÅÏ†ë Ïó∞Îèô",
                      icon: "creditcard.fill",
                      color: .purple
                  ) {
                      showingCardLogin = true
                  }

                    // ÏàòÎèô ÏûÖÎ†•
                    ConnectionOptionButton(
                        title: "ÏßÅÏ†ë ÏûÖÎ†•ÌïòÍ∏∞",
                        subtitle: "Íµ¨ÎèÖ ÏÑúÎπÑÏä§Î•º ÌïòÎÇòÏî© Ï∂îÍ∞Ä",
                        icon: "plus.circle.fill",
                        color: .orange
                    ) {
                        dismiss()
                    }
                }
                .padding(.horizontal)

                Spacer()

                // Î≥¥Ïïà ÏïàÎÇ¥
                Label("256ÎπÑÌä∏ ÏïîÌò∏ÌôîÎ°ú ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏Îê©ÎãàÎã§", systemImage: "lock.fill")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding(.bottom)
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Ï∑®ÏÜå") { dismiss() }
                }
            }
        }
        .sheet(isPresented: $showingImportOptions) {
            DetectedSubscriptionsView()
                .environmentObject(bankDataManager)
        }

        .sheet(isPresented: $showingCardLogin) {
            CardLoginView()
                .environmentObject(bankDataManager)
        }

    }
}

struct ConnectionOptionButton: View {
    let title: String
    let subtitle: String
    let icon: String
    let color: Color
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.title2)
                    .foregroundColor(color)
                    .frame(width: 50, height: 50)
                    .background(color.opacity(0.1))
                    .cornerRadius(12)

                VStack(alignment: .leading, spacing: 4) {
                    Text(title)
                        .font(.headline)
                        .foregroundColor(.primary)
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                Spacer()

                Image(systemName: "chevron.right")
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color(UIColor.systemGray6))
            .cornerRadius(12)
        }
    }
}

// Í∞ÄÏ†∏Ïò§Í∏∞ ÏßÑÌñâ ÌôîÎ©¥
// Î∞úÍ≤¨Îêú Íµ¨ÎèÖ ÌôïÏù∏ ÌôîÎ©¥
struct DetectedSubscriptionsView: View {
    @EnvironmentObject var bankDataManager: BankDataManager
    @Environment(\.dismiss) var dismiss
    @State private var selectedSubscriptions: Set<UUID> = []

    var body: some View {
        NavigationView {
            VStack {
                // Ìó§Îçî
                VStack(spacing: 8) {
                    Text("\(bankDataManager.detectedSubscriptions.count)Í∞úÏùò Íµ¨ÎèÖ Î∞úÍ≤¨")
                        .font(.title2)
                        .fontWeight(.bold)
                    Text("ÎÇ¥ Íµ¨ÎèÖ Î™©Î°ùÏóê Ï∂îÍ∞ÄÌï† Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                .padding()

                // Î∞úÍ≤¨Îêú Íµ¨ÎèÖ Î¶¨Ïä§Ìä∏
                List {
                    ForEach(bankDataManager.detectedSubscriptions) { subscription in
                        DetectedSubscriptionRow(
                            subscription: subscription,
                            isSelected: selectedSubscriptions.contains(subscription.id)
                        ) {
                            if selectedSubscriptions.contains(subscription.id) {
                                selectedSubscriptions.remove(subscription.id)
                            } else {
                                selectedSubscriptions.insert(subscription.id)
                            }
                        }
                    }
                }
                .listStyle(InsetGroupedListStyle())

                // Ï∂îÍ∞Ä Î≤ÑÌäº
                Button(action: addSelectedSubscriptions) {
                    Text("ÏÑ†ÌÉùÌïú \(selectedSubscriptions.count)Í∞ú Ï∂îÍ∞ÄÌïòÍ∏∞")
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(selectedSubscriptions.isEmpty ? Color.gray : Color.blue)
                        .cornerRadius(12)
                        .padding()
                }
                .disabled(selectedSubscriptions.isEmpty)
            }
            .navigationTitle("Î∞úÍ≤¨Îêú Íµ¨ÎèÖ")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Ï∑®ÏÜå") { dismiss() }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Î™®Îëê ÏÑ†ÌÉù") {
                        selectedSubscriptions = Set(bankDataManager.detectedSubscriptions.map { $0.id })
                    }
                }
            }
            .onAppear {
                // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌôïÏù∏Îêú Í≤ÉÎì§ÏùÄ ÏÑ†ÌÉù
                selectedSubscriptions = Set(bankDataManager.detectedSubscriptions
                    .filter { $0.isConfirmed }
                    .map { $0.id })
            }
        }
    }

    func addSelectedSubscriptions() {
        // Ïã§Ï†úÎ°úÎäî Ïó¨Í∏∞ÏÑú ÏÑ†ÌÉùÎêú Íµ¨ÎèÖÎì§ÏùÑ Ï†ÄÏû•
        print("Ï∂îÍ∞ÄÎêú Íµ¨ÎèÖ: \(selectedSubscriptions.count)Í∞ú")
        dismiss()
    }
}

struct DetectedSubscriptionRow: View {
    let subscription: BankDataManager.DetectedSubscription
    let isSelected: Bool
    let onTap: () -> Void

    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 16) {
                // Ï≤¥ÌÅ¨Î∞ïÏä§
                Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isSelected ? .blue : .gray)
                    .font(.title2)

                // Íµ¨ÎèÖ Ï†ïÎ≥¥
                VStack(alignment: .leading, spacing: 4) {
                    Text(subscription.merchantName)
                        .font(.headline)
                        .foregroundColor(.primary)

                    HStack(spacing: 8) {
                        Text(subscription.category)
                            .font(.caption)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 2)
                            .background(Color(UIColor.systemGray5))
                            .cornerRadius(8)

                        Text(subscription.frequency)
                            .font(.caption)
                            .foregroundColor(.secondary)

                        Text("ÎßàÏßÄÎßâ Í≤∞Ï†ú: \(subscription.lastChargeDate.formatted(date: .abbreviated, time: .omitted))")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }

                Spacer()

                // Í∏àÏï°
                Text("‚Ç©\(subscription.amount.formatted())")
                    .font(.headline)
                    .foregroundColor(.primary)
            }
            .padding(.vertical, 8)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct BankConnectionView_Previews: PreviewProvider {
    static var previews: some View {
        BankConnectionView()
            .environmentObject(BankDataManager())
    }
}
